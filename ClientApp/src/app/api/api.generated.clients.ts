//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class LIVLensAPIClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    brands_GetBrands(): Promise<BrandDim[]> {
        let url_ = this.baseUrl + "/api/Brands";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrands_GetBrands(_response);
        });
    }

    protected processBrands_GetBrands(response: Response): Promise<BrandDim[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BrandDim.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandDim[]>(null as any);
    }

    brands_AddBrand(brand: BrandDim): Promise<void> {
        let url_ = this.baseUrl + "/api/Brands";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(brand);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrands_AddBrand(_response);
        });
    }

    protected processBrands_AddBrand(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    brands_GetBrandModels(): Promise<BrandModelDim[]> {
        let url_ = this.baseUrl + "/api/Brands/brand-models";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrands_GetBrandModels(_response);
        });
    }

    protected processBrands_GetBrandModels(response: Response): Promise<BrandModelDim[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BrandModelDim.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandModelDim[]>(null as any);
    }

    brands_AddBrandModel(brandModel: BrandModelDim): Promise<void> {
        let url_ = this.baseUrl + "/api/Brands/brand-models";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(brandModel);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrands_AddBrandModel(_response);
        });
    }

    protected processBrands_AddBrandModel(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    brands_GetBrandById(id: number): Promise<BrandDim> {
        let url_ = this.baseUrl + "/api/Brands/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrands_GetBrandById(_response);
        });
    }

    protected processBrands_GetBrandById(response: Response): Promise<BrandDim> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandDim.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandDim>(null as any);
    }

    brands_UpdateBrand(id: number, brand: BrandDim): Promise<void> {
        let url_ = this.baseUrl + "/api/Brands/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(brand);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrands_UpdateBrand(_response);
        });
    }

    protected processBrands_UpdateBrand(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    brands_DeleteBrand(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Brands/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrands_DeleteBrand(_response);
        });
    }

    protected processBrands_DeleteBrand(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    brands_GetBrandModelById(id: number): Promise<BrandModelDim> {
        let url_ = this.baseUrl + "/api/Brands/brand-models/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrands_GetBrandModelById(_response);
        });
    }

    protected processBrands_GetBrandModelById(response: Response): Promise<BrandModelDim> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BrandModelDim.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandModelDim>(null as any);
    }

    brands_UpdateBrandModel(id: number, brandModel: BrandModelDim): Promise<void> {
        let url_ = this.baseUrl + "/api/Brands/brand-models/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(brandModel);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrands_UpdateBrandModel(_response);
        });
    }

    protected processBrands_UpdateBrandModel(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    brands_DeleteBrandModel(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Brands/brand-models/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processBrands_DeleteBrandModel(_response);
        });
    }

    protected processBrands_DeleteBrandModel(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    equipment_GetClubs(): Promise<ClubDim[]> {
        let url_ = this.baseUrl + "/api/Equipment/clubs";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEquipment_GetClubs(_response);
        });
    }

    protected processEquipment_GetClubs(response: Response): Promise<ClubDim[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ClubDim.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ClubDim[]>(null as any);
    }

    equipment_GetBrandModels(): Promise<BrandModelDim[]> {
        let url_ = this.baseUrl + "/api/Equipment/brand-models";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEquipment_GetBrandModels(_response);
        });
    }

    protected processEquipment_GetBrandModels(response: Response): Promise<BrandModelDim[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(BrandModelDim.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BrandModelDim[]>(null as any);
    }

    equipment_GetProductTypes(): Promise<ProductTypeDim[]> {
        let url_ = this.baseUrl + "/api/Equipment/product-types";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEquipment_GetProductTypes(_response);
        });
    }

    protected processEquipment_GetProductTypes(response: Response): Promise<ProductTypeDim[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ProductTypeDim.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ProductTypeDim[]>(null as any);
    }

    events_GetAll(): Promise<EventDim[]> {
        let url_ = this.baseUrl + "/api/Events";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEvents_GetAll(_response);
        });
    }

    protected processEvents_GetAll(response: Response): Promise<EventDim[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(EventDim.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EventDim[]>(null as any);
    }

    events_Post(newEvent: EventDim): Promise<void> {
        let url_ = this.baseUrl + "/api/Events";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newEvent);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEvents_Post(_response);
        });
    }

    protected processEvents_Post(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    events_Get(id: number): Promise<EventDim> {
        let url_ = this.baseUrl + "/api/Events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEvents_Get(_response);
        });
    }

    protected processEvents_Get(response: Response): Promise<EventDim> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = EventDim.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<EventDim>(null as any);
    }

    events_Put(id: number, updatedEvent: EventDim): Promise<void> {
        let url_ = this.baseUrl + "/api/Events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updatedEvent);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEvents_Put(_response);
        });
    }

    protected processEvents_Put(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    events_Delete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Events/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processEvents_Delete(_response);
        });
    }

    protected processEvents_Delete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    players_GetAll(): Promise<PlayerDim[]> {
        let url_ = this.baseUrl + "/api/Players";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPlayers_GetAll(_response);
        });
    }

    protected processPlayers_GetAll(response: Response): Promise<PlayerDim[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PlayerDim.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PlayerDim[]>(null as any);
    }

    players_Post(newPlayer: PlayerDim): Promise<void> {
        let url_ = this.baseUrl + "/api/Players";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(newPlayer);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPlayers_Post(_response);
        });
    }

    protected processPlayers_Post(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    players_Get(id: number): Promise<PlayerDim> {
        let url_ = this.baseUrl + "/api/Players/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPlayers_Get(_response);
        });
    }

    protected processPlayers_Get(response: Response): Promise<PlayerDim> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PlayerDim.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PlayerDim>(null as any);
    }

    players_Put(id: number, updatedPlayer: PlayerDim): Promise<void> {
        let url_ = this.baseUrl + "/api/Players/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(updatedPlayer);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPlayers_Put(_response);
        });
    }

    protected processPlayers_Put(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    players_Delete(id: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Players/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPlayers_Delete(_response);
        });
    }

    protected processPlayers_Delete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class BrandDim implements IBrandDim {
    brandId?: number;
    brand?: string;
    addDate?: Date;
    updateDate?: Date;
    deleteDate?: Date | undefined;

    constructor(data?: IBrandDim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brandId = _data["brandId"];
            this.brand = _data["brand"];
            this.addDate = _data["addDate"] ? new Date(_data["addDate"].toString()) : <any>undefined;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>undefined;
            this.deleteDate = _data["deleteDate"] ? new Date(_data["deleteDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): BrandDim {
        data = typeof data === 'object' ? data : {};
        let result = new BrandDim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brandId"] = this.brandId;
        data["brand"] = this.brand;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["deleteDate"] = this.deleteDate ? this.deleteDate.toISOString() : <any>undefined;
        return data;
    }
}

export interface IBrandDim {
    brandId?: number;
    brand?: string;
    addDate?: Date;
    updateDate?: Date;
    deleteDate?: Date | undefined;
}

export class BrandModelDim implements IBrandModelDim {
    brandModelId?: number;
    brandId?: number;
    brand?: string;
    model?: string;
    internalAttrCategory?: string | undefined;
    addDate?: Date;
    deleteDate?: Date | undefined;
    updateDate?: Date;
    surveyFacts?: SurveyFact[];

    constructor(data?: IBrandModelDim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.brandModelId = _data["brandModelId"];
            this.brandId = _data["brandId"];
            this.brand = _data["brand"];
            this.model = _data["model"];
            this.internalAttrCategory = _data["internalAttrCategory"];
            this.addDate = _data["addDate"] ? new Date(_data["addDate"].toString()) : <any>undefined;
            this.deleteDate = _data["deleteDate"] ? new Date(_data["deleteDate"].toString()) : <any>undefined;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["surveyFacts"])) {
                this.surveyFacts = [] as any;
                for (let item of _data["surveyFacts"])
                    this.surveyFacts!.push(SurveyFact.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BrandModelDim {
        data = typeof data === 'object' ? data : {};
        let result = new BrandModelDim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["brandModelId"] = this.brandModelId;
        data["brandId"] = this.brandId;
        data["brand"] = this.brand;
        data["model"] = this.model;
        data["internalAttrCategory"] = this.internalAttrCategory;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : <any>undefined;
        data["deleteDate"] = this.deleteDate ? this.deleteDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        if (Array.isArray(this.surveyFacts)) {
            data["surveyFacts"] = [];
            for (let item of this.surveyFacts)
                data["surveyFacts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBrandModelDim {
    brandModelId?: number;
    brandId?: number;
    brand?: string;
    model?: string;
    internalAttrCategory?: string | undefined;
    addDate?: Date;
    deleteDate?: Date | undefined;
    updateDate?: Date;
    surveyFacts?: SurveyFact[];
}

export class SurveyFact implements ISurveyFact {
    surveyId?: number;
    eventPlayerId?: number;
    productTypeId?: number;
    brandModelId?: number;
    addDate?: Date;
    updateDate?: Date;
    brandModel?: BrandModelDim;
    eventPlayer?: EventPlayerDim;
    productType?: ProductTypeDim;

    constructor(data?: ISurveyFact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.surveyId = _data["surveyId"];
            this.eventPlayerId = _data["eventPlayerId"];
            this.productTypeId = _data["productTypeId"];
            this.brandModelId = _data["brandModelId"];
            this.addDate = _data["addDate"] ? new Date(_data["addDate"].toString()) : <any>undefined;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>undefined;
            this.brandModel = _data["brandModel"] ? BrandModelDim.fromJS(_data["brandModel"]) : <any>undefined;
            this.eventPlayer = _data["eventPlayer"] ? EventPlayerDim.fromJS(_data["eventPlayer"]) : <any>undefined;
            this.productType = _data["productType"] ? ProductTypeDim.fromJS(_data["productType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): SurveyFact {
        data = typeof data === 'object' ? data : {};
        let result = new SurveyFact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["surveyId"] = this.surveyId;
        data["eventPlayerId"] = this.eventPlayerId;
        data["productTypeId"] = this.productTypeId;
        data["brandModelId"] = this.brandModelId;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["brandModel"] = this.brandModel ? this.brandModel.toJSON() : <any>undefined;
        data["eventPlayer"] = this.eventPlayer ? this.eventPlayer.toJSON() : <any>undefined;
        data["productType"] = this.productType ? this.productType.toJSON() : <any>undefined;
        return data;
    }
}

export interface ISurveyFact {
    surveyId?: number;
    eventPlayerId?: number;
    productTypeId?: number;
    brandModelId?: number;
    addDate?: Date;
    updateDate?: Date;
    brandModel?: BrandModelDim;
    eventPlayer?: EventPlayerDim;
    productType?: ProductTypeDim;
}

export class EventPlayerDim implements IEventPlayerDim {
    eventPlayerId?: number;
    eventId?: number;
    playerId?: number;
    teeTime?: Date | undefined;
    playedInd?: number;
    addDate?: Date;
    updateDate?: Date;
    event?: EventDim;
    player?: PlayerDim;
    eventPlayerScoreFacts?: EventPlayerScoreFact[];
    surveyFacts?: SurveyFact[];

    constructor(data?: IEventPlayerDim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventPlayerId = _data["eventPlayerId"];
            this.eventId = _data["eventId"];
            this.playerId = _data["playerId"];
            this.teeTime = _data["teeTime"] ? new Date(_data["teeTime"].toString()) : <any>undefined;
            this.playedInd = _data["playedInd"];
            this.addDate = _data["addDate"] ? new Date(_data["addDate"].toString()) : <any>undefined;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>undefined;
            this.event = _data["event"] ? EventDim.fromJS(_data["event"]) : <any>undefined;
            this.player = _data["player"] ? PlayerDim.fromJS(_data["player"]) : <any>undefined;
            if (Array.isArray(_data["eventPlayerScoreFacts"])) {
                this.eventPlayerScoreFacts = [] as any;
                for (let item of _data["eventPlayerScoreFacts"])
                    this.eventPlayerScoreFacts!.push(EventPlayerScoreFact.fromJS(item));
            }
            if (Array.isArray(_data["surveyFacts"])) {
                this.surveyFacts = [] as any;
                for (let item of _data["surveyFacts"])
                    this.surveyFacts!.push(SurveyFact.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EventPlayerDim {
        data = typeof data === 'object' ? data : {};
        let result = new EventPlayerDim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventPlayerId"] = this.eventPlayerId;
        data["eventId"] = this.eventId;
        data["playerId"] = this.playerId;
        data["teeTime"] = this.teeTime ? this.teeTime.toISOString() : <any>undefined;
        data["playedInd"] = this.playedInd;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["event"] = this.event ? this.event.toJSON() : <any>undefined;
        data["player"] = this.player ? this.player.toJSON() : <any>undefined;
        if (Array.isArray(this.eventPlayerScoreFacts)) {
            data["eventPlayerScoreFacts"] = [];
            for (let item of this.eventPlayerScoreFacts)
                data["eventPlayerScoreFacts"].push(item.toJSON());
        }
        if (Array.isArray(this.surveyFacts)) {
            data["surveyFacts"] = [];
            for (let item of this.surveyFacts)
                data["surveyFacts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventPlayerDim {
    eventPlayerId?: number;
    eventId?: number;
    playerId?: number;
    teeTime?: Date | undefined;
    playedInd?: number;
    addDate?: Date;
    updateDate?: Date;
    event?: EventDim;
    player?: PlayerDim;
    eventPlayerScoreFacts?: EventPlayerScoreFact[];
    surveyFacts?: SurveyFact[];
}

export class EventDim implements IEventDim {
    eventId?: number;
    eventName?: string;
    city?: string;
    state?: string;
    country?: string;
    courseName?: string;
    eventDate?: Date;
    coursePar?: number | undefined;
    addDate?: Date;
    updateDate?: Date;
    eventHoleDims?: EventHoleDim[];
    eventPlayerDims?: EventPlayerDim[];

    constructor(data?: IEventDim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventId = _data["eventId"];
            this.eventName = _data["eventName"];
            this.city = _data["city"];
            this.state = _data["state"];
            this.country = _data["country"];
            this.courseName = _data["courseName"];
            this.eventDate = _data["eventDate"] ? new Date(_data["eventDate"].toString()) : <any>undefined;
            this.coursePar = _data["coursePar"];
            this.addDate = _data["addDate"] ? new Date(_data["addDate"].toString()) : <any>undefined;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["eventHoleDims"])) {
                this.eventHoleDims = [] as any;
                for (let item of _data["eventHoleDims"])
                    this.eventHoleDims!.push(EventHoleDim.fromJS(item));
            }
            if (Array.isArray(_data["eventPlayerDims"])) {
                this.eventPlayerDims = [] as any;
                for (let item of _data["eventPlayerDims"])
                    this.eventPlayerDims!.push(EventPlayerDim.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EventDim {
        data = typeof data === 'object' ? data : {};
        let result = new EventDim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventId"] = this.eventId;
        data["eventName"] = this.eventName;
        data["city"] = this.city;
        data["state"] = this.state;
        data["country"] = this.country;
        data["courseName"] = this.courseName;
        data["eventDate"] = this.eventDate ? this.eventDate.toISOString() : <any>undefined;
        data["coursePar"] = this.coursePar;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        if (Array.isArray(this.eventHoleDims)) {
            data["eventHoleDims"] = [];
            for (let item of this.eventHoleDims)
                data["eventHoleDims"].push(item.toJSON());
        }
        if (Array.isArray(this.eventPlayerDims)) {
            data["eventPlayerDims"] = [];
            for (let item of this.eventPlayerDims)
                data["eventPlayerDims"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventDim {
    eventId?: number;
    eventName?: string;
    city?: string;
    state?: string;
    country?: string;
    courseName?: string;
    eventDate?: Date;
    coursePar?: number | undefined;
    addDate?: Date;
    updateDate?: Date;
    eventHoleDims?: EventHoleDim[];
    eventPlayerDims?: EventPlayerDim[];
}

export class EventHoleDim implements IEventHoleDim {
    eventHoleId?: number;
    eventId?: number;
    holeNum?: number;
    par?: number;
    addDate?: Date;
    updateDate?: Date;
    event?: EventDim;
    eventPlayerScoreFacts?: EventPlayerScoreFact[];

    constructor(data?: IEventHoleDim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventHoleId = _data["eventHoleId"];
            this.eventId = _data["eventId"];
            this.holeNum = _data["holeNum"];
            this.par = _data["par"];
            this.addDate = _data["addDate"] ? new Date(_data["addDate"].toString()) : <any>undefined;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>undefined;
            this.event = _data["event"] ? EventDim.fromJS(_data["event"]) : <any>undefined;
            if (Array.isArray(_data["eventPlayerScoreFacts"])) {
                this.eventPlayerScoreFacts = [] as any;
                for (let item of _data["eventPlayerScoreFacts"])
                    this.eventPlayerScoreFacts!.push(EventPlayerScoreFact.fromJS(item));
            }
        }
    }

    static fromJS(data: any): EventHoleDim {
        data = typeof data === 'object' ? data : {};
        let result = new EventHoleDim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventHoleId"] = this.eventHoleId;
        data["eventId"] = this.eventId;
        data["holeNum"] = this.holeNum;
        data["par"] = this.par;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["event"] = this.event ? this.event.toJSON() : <any>undefined;
        if (Array.isArray(this.eventPlayerScoreFacts)) {
            data["eventPlayerScoreFacts"] = [];
            for (let item of this.eventPlayerScoreFacts)
                data["eventPlayerScoreFacts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEventHoleDim {
    eventHoleId?: number;
    eventId?: number;
    holeNum?: number;
    par?: number;
    addDate?: Date;
    updateDate?: Date;
    event?: EventDim;
    eventPlayerScoreFacts?: EventPlayerScoreFact[];
}

export class EventPlayerScoreFact implements IEventPlayerScoreFact {
    eventPlayerScoreId?: number;
    eventPlayerId?: number;
    eventHoleId?: number;
    strokes?: number;
    addDate?: Date;
    updateDate?: Date;
    eventHole?: EventHoleDim;
    eventPlayer?: EventPlayerDim;

    constructor(data?: IEventPlayerScoreFact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.eventPlayerScoreId = _data["eventPlayerScoreId"];
            this.eventPlayerId = _data["eventPlayerId"];
            this.eventHoleId = _data["eventHoleId"];
            this.strokes = _data["strokes"];
            this.addDate = _data["addDate"] ? new Date(_data["addDate"].toString()) : <any>undefined;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>undefined;
            this.eventHole = _data["eventHole"] ? EventHoleDim.fromJS(_data["eventHole"]) : <any>undefined;
            this.eventPlayer = _data["eventPlayer"] ? EventPlayerDim.fromJS(_data["eventPlayer"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EventPlayerScoreFact {
        data = typeof data === 'object' ? data : {};
        let result = new EventPlayerScoreFact();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["eventPlayerScoreId"] = this.eventPlayerScoreId;
        data["eventPlayerId"] = this.eventPlayerId;
        data["eventHoleId"] = this.eventHoleId;
        data["strokes"] = this.strokes;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        data["eventHole"] = this.eventHole ? this.eventHole.toJSON() : <any>undefined;
        data["eventPlayer"] = this.eventPlayer ? this.eventPlayer.toJSON() : <any>undefined;
        return data;
    }
}

export interface IEventPlayerScoreFact {
    eventPlayerScoreId?: number;
    eventPlayerId?: number;
    eventHoleId?: number;
    strokes?: number;
    addDate?: Date;
    updateDate?: Date;
    eventHole?: EventHoleDim;
    eventPlayer?: EventPlayerDim;
}

export class PlayerDim implements IPlayerDim {
    playerId?: number;
    firstName?: string;
    lastName?: string;
    dob?: string | undefined;
    gender?: string | undefined;
    countryName?: string | undefined;
    countryCode?: string | undefined;
    amateur?: number | undefined;
    addDate?: Date;
    updateDate?: Date;
    eventPlayerDims?: EventPlayerDim[];

    constructor(data?: IPlayerDim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.playerId = _data["playerId"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.dob = _data["dob"];
            this.gender = _data["gender"];
            this.countryName = _data["countryName"];
            this.countryCode = _data["countryCode"];
            this.amateur = _data["amateur"];
            this.addDate = _data["addDate"] ? new Date(_data["addDate"].toString()) : <any>undefined;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["eventPlayerDims"])) {
                this.eventPlayerDims = [] as any;
                for (let item of _data["eventPlayerDims"])
                    this.eventPlayerDims!.push(EventPlayerDim.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PlayerDim {
        data = typeof data === 'object' ? data : {};
        let result = new PlayerDim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["playerId"] = this.playerId;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["dob"] = this.dob;
        data["gender"] = this.gender;
        data["countryName"] = this.countryName;
        data["countryCode"] = this.countryCode;
        data["amateur"] = this.amateur;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        if (Array.isArray(this.eventPlayerDims)) {
            data["eventPlayerDims"] = [];
            for (let item of this.eventPlayerDims)
                data["eventPlayerDims"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPlayerDim {
    playerId?: number;
    firstName?: string;
    lastName?: string;
    dob?: string | undefined;
    gender?: string | undefined;
    countryName?: string | undefined;
    countryCode?: string | undefined;
    amateur?: number | undefined;
    addDate?: Date;
    updateDate?: Date;
    eventPlayerDims?: EventPlayerDim[];
}

export class ProductTypeDim implements IProductTypeDim {
    productTypeId?: number;
    productCategory?: string;
    productSubCategory?: string | undefined;
    productType?: string;
    internalAttrCategory?: string | undefined;
    addDate?: Date;
    deleteDate?: Date | undefined;
    updateDate?: Date;
    surveyFacts?: SurveyFact[];

    constructor(data?: IProductTypeDim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.productTypeId = _data["productTypeId"];
            this.productCategory = _data["productCategory"];
            this.productSubCategory = _data["productSubCategory"];
            this.productType = _data["productType"];
            this.internalAttrCategory = _data["internalAttrCategory"];
            this.addDate = _data["addDate"] ? new Date(_data["addDate"].toString()) : <any>undefined;
            this.deleteDate = _data["deleteDate"] ? new Date(_data["deleteDate"].toString()) : <any>undefined;
            this.updateDate = _data["updateDate"] ? new Date(_data["updateDate"].toString()) : <any>undefined;
            if (Array.isArray(_data["surveyFacts"])) {
                this.surveyFacts = [] as any;
                for (let item of _data["surveyFacts"])
                    this.surveyFacts!.push(SurveyFact.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ProductTypeDim {
        data = typeof data === 'object' ? data : {};
        let result = new ProductTypeDim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["productTypeId"] = this.productTypeId;
        data["productCategory"] = this.productCategory;
        data["productSubCategory"] = this.productSubCategory;
        data["productType"] = this.productType;
        data["internalAttrCategory"] = this.internalAttrCategory;
        data["addDate"] = this.addDate ? this.addDate.toISOString() : <any>undefined;
        data["deleteDate"] = this.deleteDate ? this.deleteDate.toISOString() : <any>undefined;
        data["updateDate"] = this.updateDate ? this.updateDate.toISOString() : <any>undefined;
        if (Array.isArray(this.surveyFacts)) {
            data["surveyFacts"] = [];
            for (let item of this.surveyFacts)
                data["surveyFacts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IProductTypeDim {
    productTypeId?: number;
    productCategory?: string;
    productSubCategory?: string | undefined;
    productType?: string;
    internalAttrCategory?: string | undefined;
    addDate?: Date;
    deleteDate?: Date | undefined;
    updateDate?: Date;
    surveyFacts?: SurveyFact[];
}

export class ClubDim implements IClubDim {
    clubId?: number;
    brandId?: number | undefined;
    manufacturer?: string;
    model?: string;

    constructor(data?: IClubDim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.clubId = _data["clubId"];
            this.brandId = _data["brandId"];
            this.manufacturer = _data["manufacturer"];
            this.model = _data["model"];
        }
    }

    static fromJS(data: any): ClubDim {
        data = typeof data === 'object' ? data : {};
        let result = new ClubDim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["clubId"] = this.clubId;
        data["brandId"] = this.brandId;
        data["manufacturer"] = this.manufacturer;
        data["model"] = this.model;
        return data;
    }
}

export interface IClubDim {
    clubId?: number;
    brandId?: number | undefined;
    manufacturer?: string;
    model?: string;
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}